--- mysql-workbench-gpl-5.2.38-src/./frontend/linux/workbench/mysql-workbench.in~	2012-02-21 18:53:41.000000000 +0200
+++ mysql-workbench-gpl-5.2.38-src/./frontend/linux/workbench/mysql-workbench.in	2012-05-11 20:35:21.219997098 +0300
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/bin/sh
 
 # Uncomment the following line if you're having trouble with gnome-keyring lockups.
 # This will cause passwords to be stored only temporarily for the session.
--- mysql-workbench-community-6.1.4-nodocs-src/./plugins/wb.admin/backend/wb_server_management.py~	2014-05-04 00:23:57.000000000 +0300
+++ mysql-workbench-community-6.1.4-nodocs-src/./plugins/wb.admin/backend/wb_server_management.py	2014-05-04 00:28:47.674146927 +0300
@@ -82,7 +82,7 @@
         if '/bin/sh' in sudo_prefix or '/bin/bash' in sudo_prefix:
             command = sudo_prefix + " \"" + command.replace('\\', '\\\\').replace('"', r'\"').replace('$','\\$') + "\""
         else:
-            command = sudo_prefix + " /bin/bash -c \"" + command.replace('\\', '\\\\').replace('"', r'\"').replace('$','\\$') + "\""
+            command = sudo_prefix + " /bin/sh -c \"" + command.replace('\\', '\\\\').replace('"', r'\"').replace('$','\\$') + "\""
 
     return command
 
@@ -206,7 +206,7 @@
         return data
 
     # script should already have sudo
-    child = subprocess.Popen(["/bin/bash", "-c", script], bufsize=0,
+    child = subprocess.Popen(["/bin/sh", "-c", script], bufsize=0,
                              stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                              close_fds=True)
 
--- mysql-workbench-community-6.1.4-nodocs-src/./backend/wbprivate/workbench/wb_module.cpp~	2014-03-26 17:47:23.000000000 +0200
+++ mysql-workbench-community-6.1.4-nodocs-src/./backend/wbprivate/workbench/wb_module.cpp	2014-05-04 00:30:43.365950180 +0300
@@ -1807,7 +1807,7 @@
     char *ster = NULL;
     int rc=0;
     GError *err = NULL;
-    if (g_spawn_command_line_sync("/bin/bash -c \"ps -ec | grep \\\"mysqld\\b\\\" | awk '{ print $1 }' | xargs ps -fp | awk 'NR > 1 {for(i=1;i<=7;i++)$i=\\\"\\\"; print $0}'\"", &stdo, &ster, &rc, &err) && stdo)
+    if (g_spawn_command_line_sync("/bin/sh -c \"ps -ec | grep \\\"mysqld\\b\\\" | awk '{ print $1 }' | xargs ps -fp | awk 'NR > 1 {for(i=1;i<=7;i++)$i=\\\"\\\"; print $0}'\"", &stdo, &ster, &rc, &err) && stdo)
     {
       std::string processes(stdo);
       
--- mysql-workbench-community-6.1.4-nodocs-src/./modules/wb.utils/wb_utils_grt.py~	2014-03-26 17:47:23.000000000 +0200
+++ mysql-workbench-community-6.1.4-nodocs-src/./modules/wb.utils/wb_utils_grt.py	2014-05-04 00:31:19.540890016 +0300
@@ -433,7 +433,7 @@
         if not bundled_client_path:
             bundled_client_path = "mysql"
         command = """\\"%s\\" \\"-u%s\\" \\"-h%s\\" -P%i %s -p %s""" % (bundled_client_path, user, host, port, socket, schema)
-        subprocess.call(["/bin/bash", "-c", "%s -e \"%s\" &" % (get_linux_terminal_program(), command)])
+        subprocess.call(["/bin/sh", "-c", "%s -e \"%s\" &" % (get_linux_terminal_program(), command)])
 
 
 if sys.platform == "linux2":
@@ -524,9 +524,9 @@
                 os.chmod(setup_script, 0700)
 
                 if 'konsole' in term:
-                    subprocess.call([term, "-e", "/bin/bash", setup_script])
+                    subprocess.call([term, "-e", "/bin/sh", setup_script])
                 else:
-                    subprocess.call(["/bin/bash", "-c", "%s -e %s &" % (term, setup_script)])
+                    subprocess.call(["/bin/sh", "-c", "%s -e %s &" % (term, setup_script)])
             else:
                 raise RuntimeError("Terminal program could not be found")
 
